// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var Mathjs = require("mathjs");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function constantNodeValue(cnode) {
  var typeString = (typeof cnode.value);
  switch (typeString) {
    case "boolean" :
        return {
                TAG: /* ExnBool */2,
                _0: cnode.value
              };
    case "number" :
        return {
                TAG: /* ExnNumber */0,
                _0: cnode.value
              };
    case "string" :
        return {
                TAG: /* ExnString */1,
                _0: cnode.value
              };
    default:
      return /* ExnUnknown */0;
  }
}

function parse(expr) {
  try {
    return {
            TAG: /* Ok */0,
            _0: Mathjs.parse(expr)
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      var m = obj._1.message;
      if (m !== undefined) {
        return {
                TAG: /* Error */1,
                _0: "MathJs Parser " + m
              };
      } else {
        return {
                TAG: /* Error */1,
                _0: "MatjJs Parser"
              };
      }
    }
    throw obj;
  }
}

function examples(param) {
  console.log("MathJs.parse Examples:");
  console.log("case 1+2");
  var node = parse("1+2");
  if (node.TAG === /* Ok */0) {
    console.log(node._0.type);
  } else {
    console.log("Error: " + node._0);
  }
  console.log("case 1");
  var node$1 = parse("1");
  if (node$1.TAG === /* Ok */0) {
    var node$2 = node$1._0;
    console.log(node$2.type);
    console.log(constantNodeValue(node$2));
  } else {
    console.log("Error: " + node$1._0);
  }
  console.log("case 'hello'");
  var node$3 = parse("'hello'");
  if (node$3.TAG === /* Ok */0) {
    var node$4 = node$3._0;
    console.log(node$4.type);
    console.log(constantNodeValue(node$4));
  } else {
    console.log("Error: " + node$3._0);
  }
  console.log("case (1+2)");
  var node$5 = parse("(1+2)");
  if (node$5.TAG === /* Ok */0) {
    console.log(node$5._0.type);
  } else {
    console.log("Error: " + node$5._0);
  }
  console.log("case (1)");
  var node$6 = parse("(1)");
  if (node$6.TAG === /* Ok */0) {
    console.log(node$6._0.type);
  } else {
    console.log("Error: " + node$6._0);
  }
  console.log("case fn(1)");
  var node$7 = parse("fn(1)");
  if (node$7.TAG === /* Ok */0) {
    console.log(node$7._0.type);
  } else {
    console.log("Error: " + node$7._0);
  }
  
}

var Examples = {
  examples: examples
};

exports.constantNodeValue = constantNodeValue;
exports.parse = parse;
exports.Examples = Examples;
/* mathjs Not a pure module */
